// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String
  access_token      String
  expires_at        Int
  token_type        String
  scope             String
  id_token          String
  session_state     String
  User              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  User         User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
  SERVICE_PROVIDER
}

model User {
  id            String    @id @default(uuid())
  name          String
  firstName     String
  phone         Int
  lastName      String
  email         String    @unique
  password      String
  emailVerified DateTime?
  status        Boolean?  @default(true)
  image         String?
  role          UserRole  @default(USER)
  updatedAt     DateTime  @updatedAt()
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  isVerfied     Boolean?  @default(false)
  token         Int?
}

model Category {
  id          String    @id @default(uuid())
  title       String
  imageUrl    String?
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  products    Product[]
}

model Employee {
  id           String   @id @default(uuid())
  emplPhone    Int      @unique
  name         String
  emplImageUrl String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  emplOrders   Order[]
  carts        Cart[]
}

model Order {
  id           String         @id @default(uuid())
  title        String
  totalPaid    Int
  orderAmount  Int
  orderDate    DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt()
  orderDetails OrderDetails[]
  payments     Payment[]
  Employee     Employee?      @relation(fields: [employeeId], references: [id])
  employeeId   String?
}

model Payment {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  totalPaid  Int
  amountPaid Int
  datePaid   DateTime @default(now())

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model OrderDetails {
  id          String   @id @default(uuid())
  title       String
  totalPaid   Int
  orderAmount Int
  orderDate   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  Order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?
}

model Cart {
  id          String    @id @default(uuid())
  title       String
  totalPaid   Int
  orderAmount Int
  orderDate   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  Employee    Employee? @relation(fields: [employeeId], references: [id])
  employeeId  String?
  Product     Product?  @relation(fields: [productId], references: [id])
  productId   String?
}

model Product {
  id           String   @id @default(uuid())
  name         String
  slug         String
  costPrice    Float
  sellingPrice Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
  category     String
  title        String
  description  String

  orderDetails OrderDetails[]
  Cart         Cart[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}
